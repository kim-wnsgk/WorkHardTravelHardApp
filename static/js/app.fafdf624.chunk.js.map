{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","a","async","AsyncStorage","getItem","s","JSON","parse","saveToDos","toSave","setItem","stringify","deleteToDo","key","Alert","alert","onPress","newToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","Text","btnText","color","TextInput","input","placeholder","returnKeyType","value","onChangeText","payload","onSubmitEditing","Date","now","ScrollView","Object","keys","map","toDo","done","doneToDo","toDoText","flexDirection","marginRight","MaterialIcons","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","padding","alignItems","toDoTextDone","textDecorationLine"],"mappings":"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","file":"static/js/app.fafdf624.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    grey: \"#3A3D40\"\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react'\nimport {\n  StyleSheet,\n  Text, View,\n  TouchableOpacity, TextInput,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { theme } from './colors';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nconst STORAGE_KEY = \"@toDos\"\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const travel = () => {\n    setWorking(false);\n  }\n  const work = () => {\n    setWorking(true);\n  }\n\n  const onChangeText = (payload) => {\n    setText(payload);\n  }\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  }\n  const addToDo = () => {\n    if (text === \"\") {  // isEmpty To Do \n      return\n    }\n    // save To Do\n    const newToDos = Object.assign({}, toDos, { [Date.now()]: { text, working: working } });\n    /*  same with above...\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working: working },\n    } */\n\n    setToDos(newToDos);\n    saveToDos(newToDos);\n    setText('');  // after save, reset\n  }\n  const deleteToDo = (key) => {\n    Alert.alert(\"Delete To Do?\", \"Are you sure?\",\n      [{\n        text: \"Yes\", onPress: () => {\n          const newToDos = { ...toDos };\n          delete newToDos[key]\n\n          setToDos(newToDos);\n          saveToDos(newToDos);\n        }\n      }, { text: \"Cancel\" }]);\n\n  }\n\n  const doneToDo = (key) => {\n    toDos[key].done = !toDos[key].done;  // toggle\n  }\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{ ...styles.btnText, color: working ? 'white' : theme.grey }}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{ ...styles.btnText, color: working ? theme.grey : 'white' }}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput style={styles.input}\n        placeholder={working ? \"Add a To Do\" : \"Where you want to go\"}\n        //keyboardType=\"number-pad\"\n        returnKeyType=\"done\"\n        value={text}\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <TouchableOpacity onPress={() => doneToDo(key)}>\n                <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              </TouchableOpacity>\n              <View style={{ flexDirection: 'row' }}>\n                <TouchableOpacity onPress={() => deleteToDo(key)} style={{ marginRight: 10 }}>\n                  <MaterialIcons name=\"edit\" size={24} color=\"white\" />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <MaterialIcons name=\"delete\" size={24} color=\"red\" />\n                </TouchableOpacity>\n              </View>\n\n            </View>\n          ) : null\n        )}\n      </ScrollView >\n    </View >\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    // alignItems: 'center',\n    // justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",  // 행으로 정렬\n    marginTop: 100,\n\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n    color: theme.grey,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 30,\n    fontSize: 15,\n\n  },\n  toDo: {\n    backgroundColor: \"#444444\",\n    marginBottom: 10,\n    padding: 20,\n    borderRadius: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: 'white',\n    fontSize: 20,\n    fontWeight: \"500\",\n  },\n  toDoTextDone: {\n    color: 'white',\n    fontSize: 20,\n    fontWeight: \"500\",\n    textDecorationLine: \"line-through\"\n  }\n});\n\n// 1. 끝나는 지점에서 다시열기 ASYNC STORAGE  \n// 2. 삭제 옆에 새로운 아이콘, 취소선으로 완료\n// 3. 수정"],"sourceRoot":""}